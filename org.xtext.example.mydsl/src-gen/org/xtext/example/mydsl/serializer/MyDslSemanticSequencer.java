/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import org.xtext.example.mydsl.webdsl.Application;
import org.xtext.example.mydsl.webdsl.Back;
import org.xtext.example.mydsl.webdsl.Code;
import org.xtext.example.mydsl.webdsl.Front;
import org.xtext.example.mydsl.webdsl.Interceptor;
import org.xtext.example.mydsl.webdsl.Language;
import org.xtext.example.mydsl.webdsl.Requisition;
import org.xtext.example.mydsl.webdsl.WebdslPackage;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WebdslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WebdslPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case WebdslPackage.BACK:
				sequence_Back(context, (Back) semanticObject); 
				return; 
			case WebdslPackage.CODE:
				sequence_Code_Impl(context, (Code) semanticObject); 
				return; 
			case WebdslPackage.FRONT:
				sequence_Front(context, (Front) semanticObject); 
				return; 
			case WebdslPackage.INTERCEPTOR:
				sequence_Interceptor(context, (Interceptor) semanticObject); 
				return; 
			case WebdslPackage.LANGUAGE:
				sequence_Language(context, (Language) semanticObject); 
				return; 
			case WebdslPackage.REQUISITION:
				sequence_Requisition(context, (Requisition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Application returns Application
	 *
	 * Constraint:
	 *     (name=EString code+=Code code+=Code*)
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Code returns Back
	 *     Back returns Back
	 *
	 * Constraint:
	 *     id=EString
	 */
	protected void sequence_Back(ISerializationContext context, Back semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.CODE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.CODE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackAccess().getIdEStringParserRuleCall_3_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Code returns Code
	 *     Code_Impl returns Code
	 *
	 * Constraint:
	 *     id=EString
	 */
	protected void sequence_Code_Impl(ISerializationContext context, Code semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.CODE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.CODE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCode_ImplAccess().getIdEStringParserRuleCall_3_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Code returns Front
	 *     Front returns Front
	 *
	 * Constraint:
	 *     (id=EString language=Language)
	 */
	protected void sequence_Front(ISerializationContext context, Front semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.CODE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.CODE__ID));
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.FRONT__LANGUAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.FRONT__LANGUAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFrontAccess().getIdEStringParserRuleCall_3_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getFrontAccess().getLanguageLanguageParserRuleCall_5_0(), semanticObject.getLanguage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Interceptor returns Interceptor
	 *
	 * Constraint:
	 *     (name=EString method=EString url=EString)
	 */
	protected void sequence_Interceptor(ISerializationContext context, Interceptor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.INTERCEPTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.INTERCEPTOR__NAME));
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.INTERCEPTOR__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.INTERCEPTOR__METHOD));
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.INTERCEPTOR__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.INTERCEPTOR__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInterceptorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInterceptorAccess().getMethodEStringParserRuleCall_4_0(), semanticObject.getMethod());
		feeder.accept(grammarAccess.getInterceptorAccess().getUrlEStringParserRuleCall_6_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Language returns Language
	 *
	 * Constraint:
	 *     (type=EString (requisition+=Requisition requisition+=Requisition*)? (interceptor+=Interceptor interceptor+=Interceptor*)?)
	 */
	protected void sequence_Language(ISerializationContext context, Language semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Requisition returns Requisition
	 *
	 * Constraint:
	 *     (name=EString method=EString url=EString)
	 */
	protected void sequence_Requisition(ISerializationContext context, Requisition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.REQUISITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.REQUISITION__NAME));
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.REQUISITION__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.REQUISITION__METHOD));
			if (transientValues.isValueTransient(semanticObject, WebdslPackage.Literals.REQUISITION__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebdslPackage.Literals.REQUISITION__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequisitionAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRequisitionAccess().getMethodEStringParserRuleCall_4_0(), semanticObject.getMethod());
		feeder.accept(grammarAccess.getRequisitionAccess().getUrlEStringParserRuleCall_6_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
}
