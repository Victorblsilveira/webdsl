/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import webdsl.*;
import com.google.inject.Inject;
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
	
	public static <T> Iterable<T> toIterable(final Iterator<T> iterator) {
		if (iterator == null)
			throw new NullPointerException("iterator");
		return new Iterable<T>() {
			public Iterator<T> iterator() {
				return iterator;
			}
		};
	}
	
	@Inject public IQualifiedNameProvider nameProvider ;
	
	@Override
	public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
	
		 for (Application e : IterableExtensions.filter(toIterable(resource.getAllContents()), Application.class)) {
	            fsa.generateFile(
	            	nameProvider.getFullyQualifiedName(e).toString() + ".js",
	                compile(e));
	       }
	}
	
	private CharSequence compile(Application e) {
		// TODO Auto-generated method stub
		String cdg = "";
		
		for (Front c : IterableExtensions.filter(toIterable(e.eAllContents()), Front.class)) {
			
			cdg += compile(c);
		}
		
		for (Back c : IterableExtensions.filter(toIterable(e.eAllContents()), Back.class)) {
			
			cdg += compile(c);
		}
		
		return cdg;
	}
	
	private CharSequence compile(Code e) {
		// TODO Auto-generated method stub
		String cdg = "";
		
		for (Front c : IterableExtensions.filter(toIterable(e.eAllContents()), Front.class)) {
			cdg += compile(c);
		}
		for (Back c : IterableExtensions.filter(toIterable(e.eAllContents()), Back.class)) {
			cdg += compile(c);
		}
		return cdg;
	}
	
	private CharSequence compile(Front e) {
		// TODO Auto-generated method stub
		String cdg = "";
		for (Language c : IterableExtensions.filter(toIterable(e.eAllContents()), Language.class)) {
			cdg += compile(c);
		}
		return cdg;
	}
	
	private CharSequence compile(Back e) {
		// TODO Auto-generated method stub
		String cdg = "";
		return cdg;
	}
	private CharSequence compile(Language e) {
		// TODO Auto-generated method stub
		String cdg = "";
		
		for (Requisition c : IterableExtensions.filter(toIterable(e.eAllContents()), Requisition.class)) {
			cdg += compile(c);
		}
		
		for (Interceptor c : IterableExtensions.filter(toIterable(e.eAllContents()), Interceptor.class)) {
			cdg += compile(c);
		}
		
		return cdg;
	}
	private CharSequence compile(Interceptor e) {
		// TODO Auto-generated method stub
		String cdg = new StringBuilder()
		        .append("\n function Interceptor_"+e.getName()+ "(){\n")
		        .append("(function(open) { XMLHttpRequest.prototype.open = function(method, url, async, user, pass) { \n")
		        .append("this.addEventListener(\"readystatechange\", function() {\n")
		        .append("if (this.readyState == 4) { console.log(this.status); } \n")
		        .append("}, false); \n")
		        .append("open.call(this, "+e.getMethod()+","+e.getUrl()+", async, user, pass); \n")
		        .append("this.setRequestHeader(\"header\", \"field\") };\n ")
		        .append("})(XMLHttpRequest.prototype.open);} \n\n\n")
		        .toString();		
		return cdg;
	}

	private CharSequence compile(Requisition e) {
		// TODO Auto-generated method stub
		String cdg = new StringBuilder()
		        .append("\n function Request_"+e.getName()+"(){ \n")
		        .append("var request = new XMLHttpRequest(); \n")
		        .append("request.open('"+e.getMethod()+"', '"+e.getUrl()+"', true); \n")
		        .append("request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');")
		        .append("request.send(); \n } \n \n \n")
		        .toString();	
		
		return cdg;
	}
	
}
